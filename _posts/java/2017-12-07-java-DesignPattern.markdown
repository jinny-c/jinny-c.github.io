---
layout: category
title:  "设计模式"
description: 设计模式。
categories: java
#categories: [java, core]
preview: /static/images/common/150/54.jpg
---

----
----


参照：[设计模式六大原则](http://www.uml.org.cn/sjms/201211023.asp)  
参照：[白话设计模式六大原则](http://www.jianshu.com/p/a489dd5ad1fe)  
参照：[设计模式](https://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html)



### 设计模式六大原则

#### 单一职责原则
定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。  
单一职责原则：不要存在多于一个导致类变更的原因
#### 里氏替换原则
定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。  
定义2：所有引用基类的地方必须能透明地使用其子类的对象。  
里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能。
#### 依赖倒置原则
定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。

#### 接口隔离原则
定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。   
接口隔离原则：不应该被强迫地依赖那些根本用不上的方法。
#### 迪米特法则
定义：一个对象应该对其他对象保持最少的了解。

#### 开闭原则
定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。

说到这里，再回想一下前面说的5项原则，恰恰是告诉我们用抽象构建框架，用实现扩展细节的注意事项而已：
单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；
迪米特法则告诉我们要降低耦合。而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭。

### 设计模式的分类

总体来说设计模式分为三大类：  
创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。  
结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。  
行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。

其实还有两类：并发型模式和线程池模式。